<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function wireframe_install() {
  
  wireframe_enable_default_themes ();
  
  wireframe_enable_default_blocks ();
  
  wireframe_create_default_node_types ();
  
  wireframe_create_default_text_formats ();
  
  wireframe_create_default_roles_perms ();
  
  wireframe_create_default_nodes ();
  
  wireframe_create_default_menu_links ();

  // set various system variables
  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
  // Pathauto settings.
  variable_set('pathauto_node_pattern', '[node:type]/[node:title]');
  variable_set('pathauto_punctuation_underscore', '1');
  variable_set('site_frontpage', 'projects');
  variable_set('image_jpeg_quality', '100');
  variable_set('menu_options_project', '');
  variable_set('node_preview_project', 0);
  variable_set('node_preview_page', 0);
  // Enable flippy pager for Project content type
  variable_set('flippy_project', 1);
}

function wireframe_create_default_roles_perms() {
  
  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
  
    // Create a default role for site authors, with some permissions assigned.
  $author_role = new stdClass();
  $author_role->name = 'author';
  $author_role->weight = 3;
  user_role_save($author_role);
  $permissions = array(
    'access overlay',
    'access toolbar',
    'access user profiles',
    'administer taxonomy',
    'create project content',
    'delete any project content',
    'delete own project content',
    'edit any project content',
    'edit own project content',
    'edit any page content',
    'edit own page content',
    'use text format filtered_html',
    'view own unpublished content',
    'view the administration theme',
  );
  user_role_grant_permissions($author_role->rid, $permissions);
  

}

function wireframe_enable_default_themes () {
  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'rubik')
    ->execute();
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'helvis')
    ->execute();
  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->condition('name', 'bartik')
    ->execute();
  variable_set('admin_theme', 'rubik');
  variable_set('theme_default', 'helvis');
  variable_set('node_admin_theme', '1');
}

function wireframe_create_default_text_formats() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<a> <em> <strong> <ul> <ol> <li>',
          'filter_html_help' => 0,
          'filter_html_nofollow' => 0,
        ),
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);
  
  // $plain_text_format = array(
  //         'format' => 'plain_text',
  //         'name' => 'Plain Text',
  //         'weight' => 2,
  //         'filters' => array(
  //           // URL filter.
  //           'filter_url' => array(
  //             'weight' => 0,
  //             'status' => 1,
  //             'settings' => array(
  //               'allowed_html' => ' ',
  //               'filter_html_help' => 0,
  //               'filter_html_nofollow' => 0,
  //             ),
  //           ),
  //           // HTML filter.
  //           'filter_html' => array(
  //             'weight' => 1,
  //             'status' => 1,
  //           ),
  //           // Line break filter.
  //           'filter_autop' => array(
  //             'weight' => 2,
  //             'status' => 1,
  //           ),
  //           // HTML corrector filter.
  //           'filter_htmlcorrector' => array(
  //             'weight' => 10,
  //             'status' => 1,
  //           ),
  //         ),
  //       );
  //       $plain_text_format = (object) $plain_text_format;
  //       filter_format_save($plain_text_format);
  
  // Disable plain_text format
  filter_format_disable('plain_text');
  
  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access site-wide contact form', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

}

function wireframe_enable_default_blocks () {
  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'wire');
  $admin_theme = 'rubik';
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}

function wireframe_create_default_node_types () {
  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'project',
      'name' => st('Project'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
    array(
      'type' => 'node',
      'bundle' => 'project',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_category' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('node_options_project', array('status'));

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);
  variable_set('node_submitted_project', FALSE);


  // Create a default vocabulary named "Category".
  $description = st('Use categories to group project on similar topics.');
  $help = st('Select a category from the dropdown menu');
  $vocabulary = (object) array(
    'name' => 'Category',
    'description' => $description,
    'machine_name' => 'category',
    'help' => $help,

  );
  taxonomy_vocabulary_save($vocabulary);


  // Create a "Term Reference" field, enabled for the 'project' content type.
  $field = array(
    'field_name' => 'field_project_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_project_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => $vocabulary->name,
    'bundle' => 'project',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'options_select',
      'weight' => 5,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'text_plain',
        'weight' => 5,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'text_plain',
        'weight' => 5,
      ),
    ),
  );
  field_create_instance($instance);


  // Create an image field named "Image", enabled for the 'project' content type.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_project_image',
    'type' => 'image',
    'cardinality' => 6,
    'translatable' => TRUE,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);

  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_project_image',
    'entity_type' => 'node',
    'label' => 'Images',
    'bundle' => 'project',
    'description' => st('Upload up to six images to go with this project.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'projects/images',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'wireframe_thumbnail',
      ),
      'weight' => 10,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'wireframe_large', 'image_link' => ''),
        'weight' => 10,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'wireframe_medium', 'image_link' => 'content'),
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);
  
  
  // Create a file field named "Files", enabled for the 'project' content type.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_project_file',
    'type' => 'file',
    'cardinality' => 6,
    'translatable' => TRUE,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'display_field' => 0,
      'display_default' => 0,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);

  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_project_file',
    'entity_type' => 'node',
    'label' => 'Files',
    'bundle' => 'project',
    'description' => st('Upload up to six documents to go with this project.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'projects/files',
      'file_extensions' => 'txt rtf doc pdf xls',
      'max_filesize' => '',
      'description_field' => 1,
    ),

    'widget' => array(
      'type' => 'file_generic',
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'weight' => 7,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'file_default',
        'weight' => 7,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'file_default',
        'weight' => 7,
      ),
    ),
  );
  field_create_instance($instance);
  
  // Create a long text field named "Description", enabled for the 'project' content type.
  // See http://api.drupal.org/api/function/field_create_field/7
  $field = array(
    'field_name' => 'field_project_description',
    'type' => 'text_long',
    'cardinality' => 1,
    // 'settings' => array(
    //       'max_lenght' => 255,
    //     ),
    
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_project_description',
    'entity_type' => 'node',
    'label' => 'Description',
    'bundle' => 'project',
    'settings' => array(
      'rows' => 12,
      'text_processing' => 1,
    ),
    
    'widget' => array(
      'settings' => array(
        'rows' => 12,
      ),
      'weight' => 0,
    ),
    
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'weight' => 0,
      ),
    ),
  );
  field_create_instance($instance);
  
  // Create a text field named "Description", enabled for the 'project' content type.
  // See http://api.drupal.org/api/function/field_create_field/7
  $field = array(
    'field_name' => 'field_project_subtitle',
    'type' => 'text',
    // Set cardinality to unlimited for tagging.
    'cardinality' => 1,
    // 'settings' => array(
    //       'max_lenght' => 255,
    //     ),
    
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_project_subtitle',
    'entity_type' => 'node',
    'label' => 'Subtitle',
    'bundle' => 'project',
    'widget' => array(
      'weight' => -4,
      // 'settings' => array(
      //         'size' => 60,
      //         'text_processing' => 0,
      //       ),
    ),
    
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'weight' => -4,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'weight' => -4,
      ),
    ),
    
  );
  field_create_instance($instance);
  
  // Create a text field named "Description", enabled for the 'project' content type.
  // See http://api.drupal.org/api/function/field_create_field/7
  $field = array(
    'field_name' => 'field_project_date',
    'type' => 'text',
    // Set cardinality to unlimited for tagging.
    'cardinality' => 1,
    // 'settings' => array(
    //       'max_lenght' => 255,
    //     ),
    
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_project_date',
    'entity_type' => 'node',
    'label' => 'Date',
    'bundle' => 'project',
    'description' => st('Insert a date (year only).'),
    'widget' => array(
      'weight' => 4,
      // 'settings' => array(
      //         'size' => 60,
      //         'text_processing' => 0,
      //       ),
    ),
    
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'weight' => 4,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'weight' => 4,
      ),
    ),
    
  );
  field_create_instance($instance);
  
  
  // Create an image field named "Image", enabled for the 'project' content type.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_page_image',
    'type' => 'image',
    'cardinality' => 1,
    'translatable' => TRUE,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_page_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'page',
    'description' => st('Upload an image to go with this page.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'pages/images',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),

    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'wireframe_thumbnail',
      ),
      'weight' => 5,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'wireframe_large', 'image_link' => ''),
        'weight' => 5,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'wireframe_medium', 'image_link' => 'content'),
        'weight' => 5,
      ),
    ),
  );
  field_create_instance($instance);
  
  
  // Create a long text field named "Description", enabled for the 'project' content type.
  // See http://api.drupal.org/api/function/field_create_field/7
  $field = array(
    'field_name' => 'field_page_body',
    'type' => 'text_long',
    'cardinality' => 1,
    // 'settings' => array(
    //       'max_lenght' => 255,
    //     ),
    
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_page_body',
    'entity_type' => 'node',
    'label' => 'Body',
    'bundle' => 'page',
    'settings' => array(
      'rows' => 12,
      'text_processing' => 1,
    ),
    
    'widget' => array(
      'settings' => array(
        'rows' => 12,
      ),
      'weight' => 0,
    ),
    
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'weight' => 0,
      ),
    ),
  );
  field_create_instance($instance);
  
  
  // Create a file field named "Files", enabled for the 'page' content type.
  // See http://api.drupal.org/api/function/field_create_field/7

  $field = array(
    'field_name' => 'field_page_file',
    'type' => 'file',
    'cardinality' => 6,
    'translatable' => TRUE,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'display_field' => 0,
      'display_default' => 0,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);

  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_page_file',
    'entity_type' => 'node',
    'label' => 'Files',
    'bundle' => 'page',
    'description' => st('Upload up to six documents to go with this page.'),
    'required' => FALSE,

    'settings' => array(
      'file_directory' => 'pages/files',
      'file_extensions' => 'txt rtf doc pdf xls',
      'max_filesize' => '',
      'description_field' => 1,
    ),

    'widget' => array(
      'type' => 'file_generic',
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
      'weight' => 7,
    ),

    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'file_default',
        'weight' => 7,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'file_default',
        'weight' => 7,
      ),
    ),
  );
  field_create_instance($instance);
  
}

function wireframe_create_default_menu_links () {
  
  // Create a Contact link in the main menu.
  $item = array(
    'link_title' => st('Contact'),
    'link_path' => 'contact',
    'menu_name' => 'main-menu',
    'weight' => 10,
  );
  menu_link_save($item);
  
  // Create a About link in the main menu.
  $item = array(
    'link_title' => st('About'),
    'link_path' => 'node/1',
    'menu_name' => 'main-menu',
    'weight' => 5,
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();
}

function wireframe_create_default_nodes () {


  $body_text = 'Edit this page to change this text';
  
  $node = new stdClass();
  $node->type = 'page';
  node_object_prepare($node);
  
  $node->title    = 'About';
  $node->language = LANGUAGE_NONE;
  
  $path = 'about';
  $node->path = array('alias' => $path);

  node_save($node);

}